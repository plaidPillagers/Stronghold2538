// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2538.Stronghold2538.commands;

import org.usfirst.frc2538.Stronghold2538.Robot;

import edu.wpi.first.wpilibj.command.CommandGroup;


/**
 *
 */
public class AutonomousCommandGroup extends CommandGroup {


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PARAMETERS
    public AutonomousCommandGroup() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PARAMETERS
        // Add Commands here:
        // e.g. addSequential(new Command1());
        //      addSequential(new Command2());
        // these will run in order.

        // To run multiple commands at the same time,
        // use addParallel()
        // e.g. addParallel(new Command1());
        //      addSequential(new Command2());
        // Command1 and Command2 will run in parallel.

        // A command group will require all of the subsystems that each member
        // would require.
        // e.g. if Command1 requires chassis, and Command2 requires arm,
        // a CommandGroup containing them would require both the chassis and the
        // arm.
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=COMMAND_DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=COMMAND_DECLARATIONS
    		//addSequential(new driveStraightGyro());
    	String input = Robot.prefs.getString("autoSpeed", "-.65");
    	double speed = Double.valueOf(input);
    	int driveTime = Robot.prefs.getInt("driveTime", 5);
    	double angle = Robot.prefs.getDouble("angle", 43);
    	double distanceBeforeTurn = Robot.prefs.getDouble("distanceBeforeTurn", -215.8);
    	double distanceToGoal = Robot.prefs.getDouble("distanceToGoal", -130);
    	addSequential(new driveStraightWithEncoder(speed, distanceBeforeTurn), driveTime); //timed out for testing purposes only
    	addSequential(new stopDriving(), 1.5);
    	if (angle > 0) {
    		addSequential(new turnRightGyro(angle), 5);	
    	}
    	else {
    		addSequential(new turnLeftGyro(angle), 5);
    	}
    	
    	addSequential(new stopDriving(), 1.5);
    		//addSequential(new driveStraight()); //uses ultrasonic sensor
    	addSequential(new autonomousToGoal(distanceToGoal), 2.5); //encoders, timed out for testing purposes only
    	//addSequential(new stopDriving(), 1.5);
    	addSequential(new autoBIMEject(), 1);
    	
    	//addSequential(new driveForwardNoSensors(), 5);
    	
    } 
}
