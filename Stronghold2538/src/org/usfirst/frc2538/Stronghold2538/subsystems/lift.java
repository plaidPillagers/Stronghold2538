// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc2538.Stronghold2538.subsystems;

import org.usfirst.frc2538.Stronghold2538.Robot;
import org.usfirst.frc2538.Stronghold2538.RobotMap;
import org.usfirst.frc2538.Stronghold2538.commands.*;

import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 *
 */
public class lift extends Subsystem {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final SpeedController scissorsRight = RobotMap.liftscissorsRight;
    private final SpeedController scissorsRight2 = RobotMap.liftscissorsRight2;
    private final SpeedController scissorsLeft = RobotMap.liftscissorsLeft;
    private final SpeedController scissorsLeft2 = RobotMap.liftscissorsLeft2;
    private final RobotDrive robotDrive41 = RobotMap.liftRobotDrive41;
    private final DigitalInput rightUp = RobotMap.liftRightUp;
    private final DigitalInput rightDown = RobotMap.liftRightDown;
    private final DigitalInput leftUp = RobotMap.liftLeftUp;
    private final DigitalInput leftDown = RobotMap.liftLeftDown;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	// Put methods for controlling this subsystem
	// here. Call these from Commands.

	public void initDefaultCommand() {
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

		// Set the default command for a subsystem here.
		// setDefaultCommand(new MySpecialCommand());
	}

	public double JOYSTICK_TOLERANCE = .05;
	public boolean rightScissorExtended = false;
	public boolean rightScissorRetracted = false;
	public boolean leftScissorExtended = false;
	public boolean leftScissorRetracted = false;
	

	public void scissorsLift() {
		Joystick secondaryStick = Robot.oi.secondaryStick;
		//rightScissorExtended = RobotMap.liftRightUp.get();
		//rightScissorRetracted = RobotMap.liftRightDown.get();
		double speed = secondaryStick.getY();
		if (speed > 0) {
			/*
			 * if (rightScissorRetracted) {
				scissorsLeft.set(0.0);
				scissorsLeft2.set(0.0);
				scissorsRight.set(0.0);
				scissorsRight2.set(0.0);
				SmartDashboard.putString("scissors", "stopped");
			} else {
			*/
				scissorsRight.set(-1.0);
				scissorsRight2.set(-1.0);
				scissorsLeft.set(-.95);
				scissorsLeft2.set(-.95);
		} else {
			/*
			if (rightScissorExtended) {
				scissorsRight.set(0);
				scissorsRight2.set(0);
				scissorsLeft.set(0);
				scissorsLeft2.set(0);
				SmartDashboard.putString("scissors", "stopped2");
			} else {
			*/
				scissorsRight.set(1.0);
				scissorsRight2.set(1.0);
				scissorsLeft.set(1.0);
				scissorsLeft2.set(1.0);
		}
	}

	public void leftScissors() {
		Joystick secondaryStick = Robot.oi.secondaryStick;
		double yvalue = secondaryStick.getY();
		//leftScissorExtended = RobotMap.liftLeftUp.get();
		//leftScissorRetracted = RobotMap.liftLeftDown.get();
		if (yvalue > 0.0) {
			/*
			if (leftScissorExtended) {
				scissorsLeft.set(0);
				scissorsLeft2.set(0);
			} 
			else {
			*/
				scissorsLeft.set(-1.0);
				scissorsLeft2.set(-1.0);
		} 
		else {
			/*
			if (leftScissorRetracted) {
				scissorsLeft.set(0);
				scissorsLeft2.set(0);
			} 
			else {
			*/
				scissorsLeft.set(1.0);
				scissorsLeft2.set(1.0);
		}
	}

	public void rightScissors() {
		Joystick secondaryStick = Robot.oi.secondaryStick;
		double yvalue = secondaryStick.getY();
		//rightScissorExtended = RobotMap.liftRightUp.get();
		//rightScissorRetracted = RobotMap.liftLeftDown.get();
		if (yvalue > 0.0) {
			/*
			if (rightScissorExtended) {
				scissorsRight.set(0);
				scissorsRight2.set(0);
			} 
			else {
			*/
				scissorsRight.set(-1.0);
				scissorsRight2.set(-1.0);
		} 
		else{
			/*
			if (rightScissorRetracted) {
				scissorsRight.set(0);
				scissorsRight2.set(0);
			} 
			else {
			*/
				scissorsRight.set(1.0);
				scissorsRight2.set(1.0);
		}
	}

	private double minimumTolerance(double magnitude) {
		if (magnitude < JOYSTICK_TOLERANCE && magnitude > -JOYSTICK_TOLERANCE) {
			return 0;
		}
		return magnitude;
	}
}
