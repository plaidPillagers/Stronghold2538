// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2538.Stronghold2538.subsystems;

import org.usfirst.frc2538.Stronghold2538.Robot;
import org.usfirst.frc2538.Stronghold2538.RobotMap;
import org.usfirst.frc2538.Stronghold2538.commands.*;

import edu.wpi.first.wpilibj.CANTalon;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.command.Subsystem;


/**
 *
 */
public class lift extends Subsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final CANTalon scissors1 = RobotMap.liftscissors1;
    private final CANTalon scissors2 = RobotMap.liftscissors2;
    private final RobotDrive robotDrive21 = RobotMap.liftRobotDrive21;
    private final DigitalInput up = RobotMap.liftUp;
    private final DigitalInput down = RobotMap.liftDown;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
    public double JOYSTICK_TOLERANCE = .05;
    public boolean scissorsExtended = false;
    public boolean sissorosRetacted = false;
    public void scissorsLift () {
    	//scissorsExtended = RobotMap.liftUp.get();
    	//scissorsRetacted = Robot Map.LiftDown.get();
    	Joystick secondaryStick = Robot.oi.secondaryStick;
    	double speed = secondaryStick.getY();
    	if (scissorsExtended || sissorosRetacted) {
			scissors1.set(0.0);
			scissors2.set(0.0);
		}
    	else {
    		scissors2.set(minimumTolerance(speed));
    		scissors1.set(minimumTolerance(speed));
    	}
    }
    private double minimumTolerance(double magnitude) {
    	if (magnitude < JOYSTICK_TOLERANCE && magnitude > -JOYSTICK_TOLERANCE) {
			return 0;
		}
    	return magnitude;
    }
}

