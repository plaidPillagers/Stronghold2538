// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2538.Stronghold2538.subsystems;


import org.usfirst.frc2538.Stronghold2538.*;
import org.usfirst.frc2538.Stronghold2538.commands.*;

import com.ni.vision.NIVision.Range;

import edu.wpi.first.wpilibj.ADXRS450_Gyro;
import edu.wpi.first.wpilibj.AnalogGyro;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Ultrasonic;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 *
 */
public class driveSystem extends Subsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final SpeedController leftMotor = RobotMap.driveSystemLeftMotor;
    private final SpeedController rightMotor = RobotMap.driveSystemRightMotor;
    private final RobotDrive robotDrive21 = RobotMap.driveSystemRobotDrive21;
    private final Ultrasonic ultrasonic = RobotMap.driveSystemUltrasonic;
    private final Encoder encoder1 = RobotMap.driveSystemEncoder1;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final ADXRS450_Gyro gyro = RobotMap.gyro;
   public boolean isInverted = false;
   public final double JOYSTICK_TOLERANCE = .05;
   public double ultraRange = 0;
   public double angle = 0;
   public final double gyroScaling = .03; 
   public final double ultraForwardRange = 77.65;
   public final double turnAngle = 60;
   public final double turnSpeed = .25;
   public final double goalRange = 5;
   public double encoderDistance = 0;
   public final double distanceToGoal = 120;
   public final double distanceToTurn = 206.8;
  
    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new arcadeDrive());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
//    static RobotDrive drive;
	public void arcadeDriveSystem(){
		Joystick driveJoystick = Robot.oi.driveStick;
		Joystick secondaryStick = Robot.oi.secondaryStick;
		double yValue = driveJoystick.getY();
		double xValue = driveJoystick.getX();
		double direction = driveJoystick.getDirectionDegrees();
		double throttle = driveJoystick.getZ() * (-.25) + .75;
		SmartDashboard.putDouble("y", yValue);
		SmartDashboard.putDouble("x", xValue);
		//getThrottle is actually getZ on madcats joystick
		robotDrive21.arcadeDrive(backwards(minimumTolerance(yValue)) * throttle, reverseTurn(minimumTolerance(xValue)) * throttle);
		
	}
	private double minimumTolerance(double magnitude) {
    	if (magnitude < JOYSTICK_TOLERANCE && magnitude > -JOYSTICK_TOLERANCE) {
			return 0;
		}
    	else {
    		return magnitude;
		}
    }
	public double backwards(double yValue){
		if(isInverted){
			return - yValue;
		}
		return yValue;
	}
	public double reverseTurn(double xValue){
		if (isInverted) {
			return -xValue;
		}
		return xValue;
	}
	public boolean autoGyroStraight() {
		angle = gyro.getAngle();
		//ultraRange = ultrasonic.getRangeInches();
		SmartDashboard.putDouble("analogGyro", angle);
		SmartDashboard.putDouble("ultrasonic", ultraRange);
		if (ultraRange > ultraForwardRange) {	
			robotDrive21.arcadeDrive(-0.5, -angle * gyroScaling);
			return false;
		}
		else{
			return true;
		}
	}
	public boolean autoGyroTurn() {
		angle = gyro.getAngle();
		if (angle < turnAngle) {
			robotDrive21.arcadeDrive(0.0, turnSpeed);
			return false;
		}
		else {
			return true;
		}
	}
	public boolean autoDriveForward() {
		//ultraRange = ultrasonic.getRangeInches();
		SmartDashboard.putDouble("ultrasonic", ultraRange);
		if (ultraRange < goalRange) {
			robotDrive21.arcadeDrive(-0.5, 0);
			return false;
		}
		else {
			return true;
		}
	}
	public void stopDriving() {
		robotDrive21.arcadeDrive(0.0, 0.0);
	}
	public boolean autoGoalEncoders() {
		encoderDistance = encoder1.getDistance();
		if (encoderDistance < distanceToGoal) {
			robotDrive21.arcadeDrive(.3, 0.0);
			return false;
		}
		else {
			robotDrive21.arcadeDrive(0.0, 0.0);
			return true;
		}
	}
	public boolean autoStraightEncoders() {
		encoderDistance = encoder1.getDistance();
		if (encoderDistance < distanceToTurn) {
			robotDrive21.arcadeDrive(.3, 0.0);
			return false;
		}
		else {
			robotDrive21.arcadeDrive(0.0, 0.0);
			return true;
		}
	}
}
