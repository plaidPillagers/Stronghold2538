// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2538.Stronghold2538.subsystems;

import org.ietf.jgss.Oid;
import org.usfirst.frc2538.Stronghold2538.OI;
import org.usfirst.frc2538.Stronghold2538.Robot;
import org.usfirst.frc2538.Stronghold2538.RobotMap;
import org.usfirst.frc2538.Stronghold2538.commands.*;

import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 *
 */
public class BIM extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final SpeedController bIMwheels = RobotMap.bIMBIMwheels;
    private final SpeedController bIMmove = RobotMap.bIMBIMmove;
    private final RobotDrive robotDrive21 = RobotMap.bIMRobotDrive21;
    private final DigitalInput bimIn = RobotMap.bIMbimIn;
    private final DigitalInput bimOut = RobotMap.bIMbimOut;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS


    // Put methods for controlling this subsystem
    // here. Call these from Commands.

    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new BIMStop());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    public double intakeSpeed = -1;
    public double ejectSpeed = 1;
    public boolean bimLowered = false;
    public boolean bimRaised = false;
    public void wheelIntake() {
    	bIMwheels.set(intakeSpeed);
    }
    public void wheelEject() {
    	bIMwheels.set(ejectSpeed);
    	SmartDashboard.putDouble("eject speed", ejectSpeed);
    }
    public void wheelStop() {
    	bIMwheels.set(0.0);
    	//SmartDashboard.putDouble("bim wheels",);
    }
    public void bimRotation(double speed) {
    	bimLowered = RobotMap.bIMbimIn.get();
    	bIMmove.set(speed);
    	if (speed < 0) {
				bIMmove.set(speed);				
		}
    	
    	else {
			if (bimLowered) {
				bIMmove.set(0);
				SmartDashboard.putBoolean("bimLowered", bimLowered);
			}
			else {
			
				bIMmove.set(speed);
    		}
    	}
    }
    
    public void moveOut() {
    	bimRotation(-.2);
    }
    public void moveIn() {
    	bimRotation(.6);
    }
    
    public void joystickControl() {
    	Joystick secondaryStick = Robot.oi.secondaryStick;
    	double yValue = secondaryStick.getY();
    	if (yValue < 0) {
			bimRotation(-.2);
		}
    	else {
			bimRotation(.6);
		}
    	
    }
    /*
    public void limitswitch23(double speed) {
    	
    }*/
}

