// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc2538.Stronghold2538;

import org.usfirst.frc2538.Stronghold2538.commands.*;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.buttons.JoystickButton;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);
    
    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.
    
    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:
    
    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());
    
    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());
    
    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());

    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public JoystickButton joystickButton1;
    public Joystick driveStick;
    public JoystickButton scissorsLift;
    public JoystickButton wheelIntake;
    public JoystickButton wheelEject;
    public JoystickButton wheelStop;
    public JoystickButton armScrew;
    public JoystickButton moveBIMUp;
    public JoystickButton moveBIMDown;
    public Joystick secondaryStick;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public OI() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        secondaryStick = new Joystick(1);
        
        moveBIMDown = new JoystickButton(secondaryStick, 11);
        moveBIMDown.whileHeld(new rortationDown());
        moveBIMUp = new JoystickButton(secondaryStick, 12);
        moveBIMUp.whileHeld(new rotationUp());
        armScrew = new JoystickButton(secondaryStick, 2);
        armScrew.whileHeld(new Arm());
        wheelStop = new JoystickButton(secondaryStick, 4);
        wheelStop.whenPressed(new BIMStop());
        wheelEject = new JoystickButton(secondaryStick, 6);
        wheelEject.whileHeld(new BIMEject());
        wheelIntake = new JoystickButton(secondaryStick, 5);
        wheelIntake.whileHeld(new BIMIntake());
        scissorsLift = new JoystickButton(secondaryStick, 1);
        scissorsLift.whileHeld(new scissors());
        driveStick = new Joystick(0);
        
        joystickButton1 = new JoystickButton(driveStick, 1);
        joystickButton1.whileHeld(new Invert());


        // SmartDashboard Buttons
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
        SmartDashboard.putData("scissors", new scissors());
        SmartDashboard.putData("Drawbridge", new Drawbridge());
        SmartDashboard.putData("Sallyport", new Sallyport());
        SmartDashboard.putData("ArmExtendUp", new ArmExtendUp());
        SmartDashboard.putData("armLowerScrew", new armLowerScrew());
        SmartDashboard.putData("armRotateExtension", new armRotateExtension());
        SmartDashboard.putData("armRotateExtensionBack", new armRotateExtensionBack());
        SmartDashboard.putData("BIMIntake", new BIMIntake());
        SmartDashboard.putData("BIMEject", new BIMEject());
        SmartDashboard.putData("BIMStop", new BIMStop());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    public Joystick getdriveStick() {
        return driveStick;
    }

    public Joystick getsecondaryStick() {
        return secondaryStick;
    }


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}

